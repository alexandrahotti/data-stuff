name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.9", "3.10", "3.11"]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run tests with pytest
              run: |
                  pytest test_app.py -v --cov=app --cov-report=xml --cov-report=term-missing

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v3
              if: matrix.python-version == '3.11'
              with:
                  files: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    lint:
        name: Code Quality
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8 black isort

            - name: Run flake8
              run: |
                  # Stop the build if there are Python syntax errors or undefined names
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  # Exit-zero treats all errors as warnings
                  flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
              continue-on-error: true

            - name: Check code formatting with black
              run: |
                  black --check --diff .
              continue-on-error: true

            - name: Check import sorting with isort
              run: |
                  isort --check-only --diff .
              continue-on-error: true

    security:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install safety bandit

            - name: Run safety check
              run: |
                  safety check --json
              continue-on-error: true

            - name: Run bandit security scan
              run: |
                  bandit -r . -f json -o bandit-report.json
              continue-on-error: true

            - name: Upload bandit report
              uses: actions/upload-artifact@v3
              if: always()
              with:
                  name: bandit-report
                  path: bandit-report.json

    build-check:
        name: Build Check
        runs-on: ubuntu-latest
        needs: [test, lint]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Test Streamlit app syntax
              run: |
                  python -m py_compile app.py

            - name: Verify app can be imported
              run: |
                  python -c "import app; print('App imported successfully')"

            - name: Create deployment artifact
              run: |
                  mkdir -p artifact
                  cp app.py requirements.txt artifact/
                  tar -czf deployment.tar.gz artifact/

            - name: Upload deployment artifact
              uses: actions/upload-artifact@v3
              with:
                  name: streamlit-app
                  path: deployment.tar.gz
                  retention-days: 30
